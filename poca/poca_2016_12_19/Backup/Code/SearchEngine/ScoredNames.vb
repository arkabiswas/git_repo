'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml

'
'This source code was auto-generated by xsd, Version=1.1.4322.2032.
'

<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class ScoredNames
    Inherits DataSet
    
    Private tableScoredNames As ScoredNamesDataTable
    
    Private tableTextResults As TextResultsDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("ScoredNames")) Is Nothing) Then
                Me.Tables.Add(New ScoredNamesDataTable(ds.Tables("ScoredNames")))
            End If
            If (Not (ds.Tables("TextResults")) Is Nothing) Then
                Me.Tables.Add(New TextResultsDataTable(ds.Tables("TextResults")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ScoredNames As ScoredNamesDataTable
        Get
            Return Me.tableScoredNames
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TextResults As TextResultsDataTable
        Get
            Return Me.tableTextResults
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As ScoredNames = CType(MyBase.Clone,ScoredNames)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("ScoredNames")) Is Nothing) Then
            Me.Tables.Add(New ScoredNamesDataTable(ds.Tables("ScoredNames")))
        End If
        If (Not (ds.Tables("TextResults")) Is Nothing) Then
            Me.Tables.Add(New TextResultsDataTable(ds.Tables("TextResults")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableScoredNames = CType(Me.Tables("ScoredNames"),ScoredNamesDataTable)
        If (Not (Me.tableScoredNames) Is Nothing) Then
            Me.tableScoredNames.InitVars
        End If
        Me.tableTextResults = CType(Me.Tables("TextResults"),TextResultsDataTable)
        If (Not (Me.tableTextResults) Is Nothing) Then
            Me.tableTextResults.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "ScoredNames"
        Me.Prefix = ""
        Me.Namespace = ""
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableScoredNames = New ScoredNamesDataTable
        Me.Tables.Add(Me.tableScoredNames)
        Me.tableTextResults = New TextResultsDataTable
        Me.Tables.Add(Me.tableTextResults)
    End Sub
    
    Private Function ShouldSerializeScoredNames() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeTextResults() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub ScoredNamesRowChangeEventHandler(ByVal sender As Object, ByVal e As ScoredNamesRowChangeEvent)
    
    Public Delegate Sub TextResultsRowChangeEventHandler(ByVal sender As Object, ByVal e As TextResultsRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ScoredNamesDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnName As DataColumn
        
        Private columnPhoneticScore As DataColumn
        
        Private columnOrthographicScore As DataColumn
        
        Private columnMergedScore As DataColumn
        
        Private columnRecordSourceId As DataColumn
        
        Private columnProductNameUid As DataColumn
        
        Friend Sub New()
            MyBase.New("ScoredNames")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property NameColumn As DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        Friend ReadOnly Property PhoneticScoreColumn As DataColumn
            Get
                Return Me.columnPhoneticScore
            End Get
        End Property
        
        Friend ReadOnly Property OrthographicScoreColumn As DataColumn
            Get
                Return Me.columnOrthographicScore
            End Get
        End Property
        
        Friend ReadOnly Property MergedScoreColumn As DataColumn
            Get
                Return Me.columnMergedScore
            End Get
        End Property
        
        Friend ReadOnly Property RecordSourceIdColumn As DataColumn
            Get
                Return Me.columnRecordSourceId
            End Get
        End Property
        
        Friend ReadOnly Property ProductNameUidColumn As DataColumn
            Get
                Return Me.columnProductNameUid
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ScoredNamesRow
            Get
                Return CType(Me.Rows(index),ScoredNamesRow)
            End Get
        End Property
        
        Public Event ScoredNamesRowChanged As ScoredNamesRowChangeEventHandler
        
        Public Event ScoredNamesRowChanging As ScoredNamesRowChangeEventHandler
        
        Public Event ScoredNamesRowDeleted As ScoredNamesRowChangeEventHandler
        
        Public Event ScoredNamesRowDeleting As ScoredNamesRowChangeEventHandler
        
        Public Overloads Sub AddScoredNamesRow(ByVal row As ScoredNamesRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddScoredNamesRow(ByVal Name As String, ByVal PhoneticScore As Integer, ByVal OrthographicScore As Integer, ByVal MergedScore As Integer, ByVal RecordSourceId As String, ByVal ProductNameUid As String) As ScoredNamesRow
            Dim rowScoredNamesRow As ScoredNamesRow = CType(Me.NewRow,ScoredNamesRow)
            rowScoredNamesRow.ItemArray = New Object() {Name, PhoneticScore, OrthographicScore, MergedScore, RecordSourceId, ProductNameUid}
            Me.Rows.Add(rowScoredNamesRow)
            Return rowScoredNamesRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ScoredNamesDataTable = CType(MyBase.Clone,ScoredNamesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ScoredNamesDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnName = Me.Columns("Name")
            Me.columnPhoneticScore = Me.Columns("PhoneticScore")
            Me.columnOrthographicScore = Me.Columns("OrthographicScore")
            Me.columnMergedScore = Me.Columns("MergedScore")
            Me.columnRecordSourceId = Me.Columns("RecordSourceId")
            Me.columnProductNameUid = Me.Columns("ProductNameUid")
        End Sub
        
        Private Sub InitClass()
            Me.columnName = New DataColumn("Name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnName)
            Me.columnPhoneticScore = New DataColumn("PhoneticScore", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPhoneticScore)
            Me.columnOrthographicScore = New DataColumn("OrthographicScore", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrthographicScore)
            Me.columnMergedScore = New DataColumn("MergedScore", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMergedScore)
            Me.columnRecordSourceId = New DataColumn("RecordSourceId", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRecordSourceId)
            Me.columnProductNameUid = New DataColumn("ProductNameUid", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnProductNameUid)
        End Sub
        
        Public Function NewScoredNamesRow() As ScoredNamesRow
            Return CType(Me.NewRow,ScoredNamesRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ScoredNamesRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ScoredNamesRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ScoredNamesRowChangedEvent) Is Nothing) Then
                RaiseEvent ScoredNamesRowChanged(Me, New ScoredNamesRowChangeEvent(CType(e.Row,ScoredNamesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ScoredNamesRowChangingEvent) Is Nothing) Then
                RaiseEvent ScoredNamesRowChanging(Me, New ScoredNamesRowChangeEvent(CType(e.Row,ScoredNamesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ScoredNamesRowDeletedEvent) Is Nothing) Then
                RaiseEvent ScoredNamesRowDeleted(Me, New ScoredNamesRowChangeEvent(CType(e.Row,ScoredNamesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ScoredNamesRowDeletingEvent) Is Nothing) Then
                RaiseEvent ScoredNamesRowDeleting(Me, New ScoredNamesRowChangeEvent(CType(e.Row,ScoredNamesRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveScoredNamesRow(ByVal row As ScoredNamesRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ScoredNamesRow
        Inherits DataRow
        
        Private tableScoredNames As ScoredNamesDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableScoredNames = CType(Me.Table,ScoredNamesDataTable)
        End Sub
        
        Public Property Name As String
            Get
                Try 
                    Return CType(Me(Me.tableScoredNames.NameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScoredNames.NameColumn) = value
            End Set
        End Property
        
        Public Property PhoneticScore As Integer
            Get
                Try 
                    Return CType(Me(Me.tableScoredNames.PhoneticScoreColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScoredNames.PhoneticScoreColumn) = value
            End Set
        End Property
        
        Public Property OrthographicScore As Integer
            Get
                Try 
                    Return CType(Me(Me.tableScoredNames.OrthographicScoreColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScoredNames.OrthographicScoreColumn) = value
            End Set
        End Property
        
        Public Property MergedScore As Integer
            Get
                Try 
                    Return CType(Me(Me.tableScoredNames.MergedScoreColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScoredNames.MergedScoreColumn) = value
            End Set
        End Property
        
        Public Property RecordSourceId As String
            Get
                Try 
                    Return CType(Me(Me.tableScoredNames.RecordSourceIdColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScoredNames.RecordSourceIdColumn) = value
            End Set
        End Property
        
        Public Property ProductNameUid As String
            Get
                Try 
                    Return CType(Me(Me.tableScoredNames.ProductNameUidColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScoredNames.ProductNameUidColumn) = value
            End Set
        End Property
        
        Public Function IsNameNull() As Boolean
            Return Me.IsNull(Me.tableScoredNames.NameColumn)
        End Function
        
        Public Sub SetNameNull()
            Me(Me.tableScoredNames.NameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPhoneticScoreNull() As Boolean
            Return Me.IsNull(Me.tableScoredNames.PhoneticScoreColumn)
        End Function
        
        Public Sub SetPhoneticScoreNull()
            Me(Me.tableScoredNames.PhoneticScoreColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOrthographicScoreNull() As Boolean
            Return Me.IsNull(Me.tableScoredNames.OrthographicScoreColumn)
        End Function
        
        Public Sub SetOrthographicScoreNull()
            Me(Me.tableScoredNames.OrthographicScoreColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMergedScoreNull() As Boolean
            Return Me.IsNull(Me.tableScoredNames.MergedScoreColumn)
        End Function
        
        Public Sub SetMergedScoreNull()
            Me(Me.tableScoredNames.MergedScoreColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRecordSourceIdNull() As Boolean
            Return Me.IsNull(Me.tableScoredNames.RecordSourceIdColumn)
        End Function
        
        Public Sub SetRecordSourceIdNull()
            Me(Me.tableScoredNames.RecordSourceIdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsProductNameUidNull() As Boolean
            Return Me.IsNull(Me.tableScoredNames.ProductNameUidColumn)
        End Function
        
        Public Sub SetProductNameUidNull()
            Me(Me.tableScoredNames.ProductNameUidColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ScoredNamesRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ScoredNamesRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ScoredNamesRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ScoredNamesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TextResultsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnName As DataColumn
        
        Private columnRecordSourceId As DataColumn
        
        Private columnProductNameUid As DataColumn
        
        Friend Sub New()
            MyBase.New("TextResults")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property NameColumn As DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        Friend ReadOnly Property RecordSourceIdColumn As DataColumn
            Get
                Return Me.columnRecordSourceId
            End Get
        End Property
        
        Friend ReadOnly Property ProductNameUidColumn As DataColumn
            Get
                Return Me.columnProductNameUid
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As TextResultsRow
            Get
                Return CType(Me.Rows(index),TextResultsRow)
            End Get
        End Property
        
        Public Event TextResultsRowChanged As TextResultsRowChangeEventHandler
        
        Public Event TextResultsRowChanging As TextResultsRowChangeEventHandler
        
        Public Event TextResultsRowDeleted As TextResultsRowChangeEventHandler
        
        Public Event TextResultsRowDeleting As TextResultsRowChangeEventHandler
        
        Public Overloads Sub AddTextResultsRow(ByVal row As TextResultsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTextResultsRow(ByVal Name As String, ByVal RecordSourceId As String, ByVal ProductNameUid As String) As TextResultsRow
            Dim rowTextResultsRow As TextResultsRow = CType(Me.NewRow,TextResultsRow)
            rowTextResultsRow.ItemArray = New Object() {Name, RecordSourceId, ProductNameUid}
            Me.Rows.Add(rowTextResultsRow)
            Return rowTextResultsRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As TextResultsDataTable = CType(MyBase.Clone,TextResultsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New TextResultsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnName = Me.Columns("Name")
            Me.columnRecordSourceId = Me.Columns("RecordSourceId")
            Me.columnProductNameUid = Me.Columns("ProductNameUid")
        End Sub
        
        Private Sub InitClass()
            Me.columnName = New DataColumn("Name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnName)
            Me.columnRecordSourceId = New DataColumn("RecordSourceId", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRecordSourceId)
            Me.columnProductNameUid = New DataColumn("ProductNameUid", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnProductNameUid)
        End Sub
        
        Public Function NewTextResultsRow() As TextResultsRow
            Return CType(Me.NewRow,TextResultsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New TextResultsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TextResultsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TextResultsRowChangedEvent) Is Nothing) Then
                RaiseEvent TextResultsRowChanged(Me, New TextResultsRowChangeEvent(CType(e.Row,TextResultsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TextResultsRowChangingEvent) Is Nothing) Then
                RaiseEvent TextResultsRowChanging(Me, New TextResultsRowChangeEvent(CType(e.Row,TextResultsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TextResultsRowDeletedEvent) Is Nothing) Then
                RaiseEvent TextResultsRowDeleted(Me, New TextResultsRowChangeEvent(CType(e.Row,TextResultsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TextResultsRowDeletingEvent) Is Nothing) Then
                RaiseEvent TextResultsRowDeleting(Me, New TextResultsRowChangeEvent(CType(e.Row,TextResultsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTextResultsRow(ByVal row As TextResultsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TextResultsRow
        Inherits DataRow
        
        Private tableTextResults As TextResultsDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableTextResults = CType(Me.Table,TextResultsDataTable)
        End Sub
        
        Public Property Name As String
            Get
                Try 
                    Return CType(Me(Me.tableTextResults.NameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTextResults.NameColumn) = value
            End Set
        End Property
        
        Public Property RecordSourceId As String
            Get
                Try 
                    Return CType(Me(Me.tableTextResults.RecordSourceIdColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTextResults.RecordSourceIdColumn) = value
            End Set
        End Property
        
        Public Property ProductNameUid As String
            Get
                Try 
                    Return CType(Me(Me.tableTextResults.ProductNameUidColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTextResults.ProductNameUidColumn) = value
            End Set
        End Property
        
        Public Function IsNameNull() As Boolean
            Return Me.IsNull(Me.tableTextResults.NameColumn)
        End Function
        
        Public Sub SetNameNull()
            Me(Me.tableTextResults.NameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRecordSourceIdNull() As Boolean
            Return Me.IsNull(Me.tableTextResults.RecordSourceIdColumn)
        End Function
        
        Public Sub SetRecordSourceIdNull()
            Me(Me.tableTextResults.RecordSourceIdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsProductNameUidNull() As Boolean
            Return Me.IsNull(Me.tableTextResults.ProductNameUidColumn)
        End Function
        
        Public Sub SetProductNameUidNull()
            Me(Me.tableTextResults.ProductNameUidColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TextResultsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As TextResultsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As TextResultsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As TextResultsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
